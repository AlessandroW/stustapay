package de.stustanet.stustapay.ui.debug

import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.material.TextField
import androidx.compose.runtime.Composable
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
<<<<<<< HEAD:app/app/src/main/java/de/stustanet/stustapay/ui/ConnectionTest.kt
import de.stustanet.stustapay.net.HttpClient
import de.stustanet.stustapay.net.Response
=======
>>>>>>> github/master:app/app/src/main/java/de/stustanet/stustapay/ui/debug/DebugView.kt
import kotlinx.coroutines.launch
import kotlinx.serialization.Serializable

@Composable
fun EndpointInput(viewModel: DebugViewModel?) {
    TextField(value = viewModel?.endpointURL ?: "asdf", onValueChange = {
        viewModel!!.endpointURL = it
    })
}

@Composable
fun TestConnectionButton(viewModel: DebugViewModel?) {
    val coroutineScope = rememberCoroutineScope()

    Button(onClick = {
        coroutineScope.launch {
            viewModel!!.announceHealthStatus()
        }
    }) {
        Text(text = "Test Connection")
    }
}

@Preview
@Composable
fun DebugView(viewModel: DebugViewModel? = null) {
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally,
    ) {
        EndpointInput(viewModel = viewModel)
        TestConnectionButton(viewModel)
    }
<<<<<<< HEAD:app/app/src/main/java/de/stustanet/stustapay/ui/ConnectionTest.kt
}

suspend fun testConnection(ctx: Context) {
    val httpClient = HttpClient() { null }

    @Serializable
    data class HealthStatus(val status: String)

    val health: Response<HealthStatus> =
        httpClient.get("health", basePath = "http://10.150.9.92:8080")

    val result = when (health) {
        is Response.OK -> {
            "Status: ${health.data.status}"
        }
        is Response.Error.Msg -> {
            "Error: ${health.msg}"
        }
        is Response.Error.Exception -> {
            "Exception: ${health.throwable.localizedMessage}"
        }
    }

    Toast.makeText(ctx, result, Toast.LENGTH_LONG).show()
=======
>>>>>>> github/master:app/app/src/main/java/de/stustanet/stustapay/ui/debug/DebugView.kt
}